#!/usr/bin/env python3

"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
import time
start = time.time()

def triangleNumGen(n):
    return n * (n + 1) // 2

def getFactorCount(n):
    count = 2
    lastFactor = n
    c = 2
    while c < lastFactor:
        if n % c == 0:
            count += 2
            lastFactor = n // c
        c += 1
    return count

i = 1000
triangleNum = 0
factorCount = 0
while factorCount < 500:
    triangleNum = triangleNumGen(i)
    if triangleNum % 2 == 0 and triangleNum % 3 == 0 and triangleNum % 5 == 0:
        factorCount = getFactorCount(triangleNum)
    i += 1

""" Slightly slower method which returns all factors instead of simply the
total count """
"""
def getFactors(n):
    lst = [1, n]
    c = 2
    while c < lst[-1]:
        if n % c == 0:
            lst.append(c)
            x = n // c
            lst.append(x)
        c += 1
    return lst

i = 1000
triangleNum = 0
factors = []
while len(factors) < 500:
    triangleNum = triangleNumGen(i)
    if triangleNum % 2 == 0 and triangleNum % 3 == 0 and triangleNum % 5 == 0:
        factors = getFactors(triangleNum)
    i += 1

"""
print('Answer:',triangleNum)

end = time.time()
print(end - start)
